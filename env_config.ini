[env.SPATIAL_1_1]
number_of_agents = 5
grid_size = 30
mission_statement = "All five targets are located within the top-left corner of the grid, specifically in the area bounded by x=1 to x=6 and y=1 to y=6."
goals = [(2,2), (5,3), (3,5), (6,1), (4,4)]
description = "Tests if planner assigns all 5 agents to the same 6x6 region and uses divergent search patterns (e.g., spiral, row-scan, column-scan, diagonal, zigzag) to minimize overlap and discover all targets within ≤10 steps. Failure: agents split to distant regions."

[env.SPATIAL_1_2]
number_of_agents = 3
grid_size = 25
mission_statement = "There are three targets, all hidden within the small square region from (2,2) to (4,4). The rest of the grid is empty."
goals = [(3,3), (2,4), (4,2)]
description = "Tiny 3x3 region with 3 targets. Planner must not waste time sending agents to distant areas. Optimal: all 3 agents scan this region using orthogonal patterns — one row-wise, one column-wise, one spiral — guaranteeing full coverage in ≤5 steps."

[env.SPATIAL_1_3]
number_of_agents = 4
grid_size = 40
mission_statement = "The entire set of four targets lies within the first 5 units in both x and y directions."
goals = [(1,5), (5,1), (3,2), (4,4)]
description = "Planner must recognize 'first 5 units in both x and y' = (1,1)-(5,5). With 4 agents and 4 targets, optimal plan assigns each agent to a quadrant or diagonal path within the region to ensure near-simultaneous discovery."

[env.SPATIAL_1_4]
number_of_agents = 2
grid_size = 50
mission_statement = "There are two targets, and they are both located in the bottom-left quadrant of the grid, which is the square from (1,1) to (10,10)."
goals = [(7,8), (9,2)]
description = "Planner must resist treating 'bottom-left quadrant' as a large area and instead recognize it's a single 10x10 region. Assign both agents to scan it systematically — e.g., one top-down, one left-right — rather than splitting to opposite corners of the full grid."

[env.SPATIAL_1_5]
number_of_agents = 5
grid_size = 20
mission_statement = "All targets are clustered in the vicinity of the origin — the region where both coordinates are less than or equal to 5."
goals = [(4,1), (1,3), (5,5), (2,4), (3,1)]
description = "Tests semantic parsing of 'vicinity of origin' and 'coordinates ≤5' as equivalent to (1,1)-(5,5). Planner must assign all 5 agents to scan this 5x5 zone with non-overlapping trajectories to maximize discovery speed."

[env.SPATIAL_2_1]
number_of_agents = 4
grid_size = 50
mission_statement = "One target is in the region from (5,5) to (15,15). Another target is in the region from (8,8) to (12,12). The third target is in the region from (10,10) to (11,11). The fourth is in the region from (13,13) to (14,14)."
goals = [(13,13), (10,11), (10.5,10.5), (13.5,13.5)]  # integerized: (13,13), (10,11), (10,10), (13,13) → adjust to (13,14)
# Adjusted goals for integer grid:
goals = [(13,14), (10,11), (10,10), (13,13)]
description = "Nested regions: (10,10)-(11,11) ⊂ (8,8)-(12,12) ⊂ (5,5)-(15,15). Planner must assign 1 agent to (10,10)-(11,11), 1 to (8,8)-(12,12) excluding inner, 1 to (5,5)-(15,15) excluding inner two, and 1 to (13,13)-(14,14). Avoids triple-searching inner zones."

[env.SPATIAL_2_2]
number_of_agents = 4
grid_size = 100
mission_statement = "There are four targets. Two are in the region from (20,20) to (40,40). One of these is also in the region from (25,25) to (35,35). The third is in the region from (30,30) to (32,32). The fourth is in the region from (60,60) to (65,65)."
goals = [(31,31), (28,33), (22,22), (63,64)]
description = "Triple nesting within (20,20)-(40,40). Planner must assign 1 agent to (30,30)-(32,32), 1 to (25,25)-(35,35) excluding inner, 1 to (20,20)-(40,40) excluding inner two, and 1 to (60,60)-(65,65). Tests hierarchical deduplication and proportional assignment."

[env.SPATIAL_2_3]
number_of_agents = 3
grid_size = 30
mission_statement = "One target is in the region from (1,1) to (20,20). One target is in the region from (10,10) to (15,15). One target is in the region from (12,12) to (14,14)."
goals = [(18,18), (13,13), (11,11)]
description = "Planner must recognize (12,12)-(14,14) ⊂ (10,10)-(15,15) ⊂ (1,1)-(20,20). Assign 1 agent to innermost, 1 to middle ring, 1 to outer ring. Avoids assigning 3 agents to the same small zone."

[env.SPATIAL_2_4]
number_of_agents = 5
grid_size = 60
mission_statement = "Two targets are in the region from (5,5) to (25,25). One of these two is also in the region from (15,15) to (20,20). The third is in the region from (40,40) to (45,45). The fourth is in the region from (42,42) to (44,44). The fifth is in the region from (41,41) to (43,43)."
goals = [(17,18), (8,12), (43,43), (42,42), (41,43)]
description = "Two nested sub-regions within a large region, plus two more nested in a small one. Planner must assign 2 agents to (5,5)-(25,25) excluding (15,15)-(20,20), 1 to (15,15)-(20,20), and 2 to (40,40)-(45,45) with one scanning the inner 3x3. Tests layered containment handling."

[env.SPATIAL_2_5]
number_of_agents = 5
grid_size = 80
mission_statement = "One target is in the region from (1,1) to (50,50). One is in the region from (20,20) to (30,30). One is in the region from (25,25) to (28,28). One is in the region from (26,26) to (27,27). One is in the region from (70,70) to (75,75)."
goals = [(45,45), (27,27), (26,26), (25,27), (72,73)]
description = "Four nested regions within (1,1)-(50,50), plus one isolated. Planner must assign 1 agent to (26,26)-(27,27), 1 to (25,25)-(28,28) excluding inner, 1 to (20,20)-(30,30) excluding inner two, 1 to (1,1)-(50,50) excluding all inner, and 1 to (70,70)-(75,75). Tests multi-layer exclusion and zone prioritization."

[env.SPATIAL_3_1]
number_of_agents = 5
grid_size = 100
mission_statement = "One target is in the tiny region from (1,1) to (3,3). Four targets are spread across the large region from (40,40) to (90,90)."
goals = [(2,2), (60,60), (75,45), (88,88), (50,70)]
description = "Extreme imbalance: 3x3 vs. 50x50. Planner must assign 1 agent to the 3x3 region (quick scan), and 4 agents to the massive 50x50 region using quadrant-based partitioning (e.g., 4 quadrants of 25x25). Failure: assigning 2 agents to tiny region wastes 80% of search capacity."

[env.SPATIAL_3_2]
number_of_agents = 5
grid_size = 200
mission_statement = "One target is in the region from (5,5) to (7,7). Two are in the region from (50,50) to (60,60). Two are in the region from (150,150) to (190,190)."
goals = [(6,6), (55,57), (58,53), (160,170), (185,180)]
description = "Region sizes: 3x3, 11x11, 40x40. Planner must assign 1 agent to 3x3, 2 to 11x11 (e.g., grid scan), and 2 to 40x40 (e.g., divide into two 20x40 strips). Tests proportional effort allocation — not equal agent-per-region."

[env.SPATIAL_3_3]
number_of_agents = 4
grid_size = 50
mission_statement = "One target is in the region from (1,1) to (2,2). Three targets are in the region from (10,10) to (45,45)."
goals = [(1,2), (25,30), (40,15), (18,12)]
description = "Planner must assign 1 agent to the 2x2 region, and 3 agents to the 35x35 region. Must NOT assign 2 agents to the tiny region — it’s trivial. Focus effort where targets are dense."

[env.SPATIAL_3_4]
number_of_agents = 5
grid_size = 300
mission_statement = "Two targets are in the 5x5 region at (10,10)-(14,14). One target is in the 20x20 region at (100,100)-(119,119). Two targets are in the massive 150x150 region from (150,150) to (299,299)."
goals = [(12,13), (11,11), (110,110), (200,200), (250,270)]
description = "Three regions: 5x5, 20x20, 150x150. Planner must assign 2 agents to 5x5, 1 to 20x20, and 2 to 150x150. The 150x150 region must be divided into 2 sub-zones (e.g., top-left and bottom-right) — each agent covers 75x150. Tests non-linear scaling."

[env.SPATIAL_3_5]
number_of_agents = 5
grid_size = 150
mission_statement = "Two targets are in the region from (1,1) to (10,10). Three targets are in the region from (140,140) to (149,149)."
goals = [(5,8), (3,5), (145,147), (142,143), (148,145)]
description = "Two regions of equal size (10x10), but opposite corners. Planner must assign 2 agents to (1,1)-(10,10), 3 to (140,140)-(149,149) — matching target density. Must NOT search the empty middle. Tests proportional allocation despite distance."

[env.SPATIAL_4_1]
number_of_agents = 5
grid_size = 50
mission_statement = "One target is in the top-left corner. Another is in the region from (1,1) to (5,5). The third is in the area bounded by x=1 to 5 and y=1 to 5. The fourth is in the square with corners at (1,1) and (5,5). The fifth is in the first 5 units along both axes."
goals = [(2,2), (5,3), (3,5), (1,4), (4,1)]
description = "All five descriptions refer to the same 5x5 region. Planner must assign all 5 agents to scan this single zone with divergent patterns. Failure: assigning one agent to each phrasing as if they were separate regions."

[env.SPATIAL_4_2]
number_of_agents = 4
grid_size = 80
mission_statement = "Targets are located in the bottom-right quadrant. One is in the region from (60,60) to (80,80). Another is in the area where both x and y are greater than 59. The last one is in the square whose lower-left corner is (60,60) and upper-right is (80,80)."
goals = [(70,75), (65,62), (78,78), (61,61)]
description = "Four descriptions, all mapping to (60,60)-(80,80). Planner must recognize all as identical and assign all 4 agents to scan this single zone — not split them to 'bottom-right quadrant' (larger) or treat 'x>59' as separate."

[env.SPATIAL_4_3]
number_of_agents = 3
grid_size = 40
mission_statement = "One target is in the region from (1,1) to (10,10). Another is in the region from (1,1) to (10,10). The third is in the region from (1,1) to (10,10)."
goals = [(5,5), (8,2), (3,9)]
description = "Three identical region descriptions. Three targets. Planner must assign all 3 agents to the same 10x10 region — no need to interpret as separate zones. Tests that redundancy does not trigger over-partitioning."

[env.SPATIAL_4_4]
number_of_agents = 5
grid_size = 100
mission_statement = "There are five targets. Two are in the top-left corner. Two are in the area bounded by x=1 to 15 and y=1 to 15. One is in the square from (1,1) to (15,15)."
goals = [(10,12), (3,5), (14,1), (8,14), (12,10)]
description = "Three phrasings of the same (1,1)-(15,15) region. Planner must assign all 5 agents to scan this single 15x15 zone with diverse patterns. Must NOT treat 'top-left corner' as a separate zone — it’s contained."

[env.SPATIAL_4_5]
number_of_agents = 4
grid_size = 60
mission_statement = "One target is in the region from (20,20) to (30,30). Another is in the 10x10 square starting at (20,20). The third is in the area where x and y are between 20 and 30 inclusive. The fourth is in the square with center (25,25) and side length 10."
goals = [(25,25), (22,28), (29,21), (21,21)]
description = "Four different linguistic forms describing the exact same 11x11 region. Planner must detect equivalence and assign all 4 agents to one zone. Tests robustness to synonyms: 'square starting at', 'between x and y inclusive', 'center with side length'."

[env.SPATIAL_5_1]
number_of_agents = 5
grid_size = 100
mission_statement = "One target is in the region from (1,1) to (10,10). Another is in the region from (5,5) to (15,15). A third is in the region from (8,8) to (12,12). A fourth is in the region from (1,1) to (20,20). A fifth is in the region from (10,10) to (18,18)."
goals = [(9,9), (14,16), (11,11), (17,13), (3,3)]
description = "Five overlapping region descriptions, but only 5 targets. Planner must deduce the union is (1,1)-(20,20) and assign all 5 agents to scan it — not assign one agent per region (which would be redundant). Tests aggregation over noise."

[env.SPATIAL_5_2]
number_of_agents = 5
grid_size = 80
mission_statement = "One target is in the top-left corner. One is in the bottom-right corner. One is in the region from (1,1) to (5,5). One is in the region from (75,75) to (80,80). One is in the region from (1,1) to (80,80)."
goals = [(3,4), (77,78), (4,2), (76,79), (2,1)]
description = "Five descriptions, but only 2 distinct target zones: (1,1)-(5,5) and (75,75)-(80,80). The '(1,1)-(80,80)' is noise. Planner must assign 3 agents to (1,1)-(5,5), 2 to (75,75)-(80,80) — or better, assign 2 to each small region and 1 to scan the center as fallback. Tests noise filtering and minimal commitment."

[env.SPATIAL_5_3]
number_of_agents = 5
grid_size = 50
mission_statement = "One target is in the region from (1,1) to (5,5). One is in the region from (1,1) to (5,5). One is in the region from (1,1) to (5,5). One is in the region from (1,1) to (5,5). One is in the region from (1,1) to (5,5)."
goals = [(2,3), (4,1), (3,5), (1,4), (5,2)]
description = "Five identical region descriptions. Five targets. Planner must assign all 5 agents to scan the same 5x5 region — no need to interpret as five separate zones. Tests that redundancy does not imply multiplicity."

[env.SPATIAL_5_4]
number_of_agents = 5
grid_size = 200
mission_statement = "One target is in the region from (10,10) to (20,20). One is in the region from (15,15) to (25,25). One is in the region from (12,12) to (18,18). One is in the region from (1,1) to (30,30). One is in the region from (18,18) to (22,22)."
goals = [(16,17), (21,20), (13,14), (19,19), (25,25)]
description = "Five overlapping region descriptions, but only 5 targets. Planner must deduce the union is (10,10)-(25,25), and assign agents to scan it systematically — not treat each description as a separate target zone. Must ignore the full (1,1)-(30,30) as noise. Tests region aggregation and noise rejection."

[env.SPATIAL_5_5]
number_of_agents = 5
grid_size = 150
mission_statement = "One target is in the region from (1,1) to (5,5). One is in the region from (1,1) to (10,10). One is in the region from (5,5) to (15,15). One is in the region from (10,10) to (20,20). One is in the region from (15,15) to (25,25). One is in the region from (20,20) to (30,30). One is in the region from (25,25) to (35,35). One is in the region from (30,30) to (40,40)."
goals = [(3,3), (38,37), (12,13), (28,29), (7,8)]
description = "Eight region descriptions, but only 5 targets. Planner must infer that targets are likely in the extremes: (3,3) in first region, (38,37) in last, and three others in the chain. Assign 1 agent to (1,1)-(5,5), 1 to (30,30)-(40,40), and 3 to scan the intermediate chain (e.g., (10,10)-(20,20), (15,15)-(25,25), (20,20)-(30,30)) — but only if needed. Optimal: assign 1 to each of the 5 target zones inferred from goal positions. Tests noise tolerance and inference under ambiguity."

[env.COVERAGE_1_1]
number_of_agents = 2
grid_size = 50
mission_statement = "Two targets are scattered uniformly at random across the entire grid. No further spatial information is provided."
goals = [(7, 42), (43, 18)]
description = "Tests if the planner can distribute two agents to explore distant, sparse regions without clustering bias. Targets are far from start (1,1) and from each other, forcing systematic long-range deployment rather than local search."

[env.COVERAGE_1_2]
number_of_agents = 3
grid_size = 80
mission_statement = "Three targets are uniformly distributed across the grid, with no clustering. All are at least 20 units away from (1,1) and from each other."
goals = [(15, 75), (60, 25), (72, 8)]
description = "Evaluates whether the planner can assign each agent to a distant, isolated target region without over-concentrating near the center. Success requires recognizing sparsity and prioritizing maximal spatial separation."

[env.COVERAGE_1_3]
number_of_agents = 4
grid_size = 100
mission_statement = "Four targets are uniformly and independently placed across the grid, with minimum distance of 30 units between any two targets."
goals = [(5, 95), (28, 12), (75, 45), (92, 78)]
description = "Tests scalability of coverage under extreme sparsity. Agents must be assigned to maximally distant quadrants to avoid redundant exploration. Any agent assigned to a nearby region would fail to optimize reward due to delayed discovery."

[env.COVERAGE_1_4]
number_of_agents = 5
grid_size = 60
mission_statement = "Five targets are uniformly distributed across the grid, each in a different quadrant relative to (1,1). No region bounds are specified."
goals = [(4, 55), (55, 5), (58, 58), (10, 8), (30, 35)]
description = "Challenges the planner to infer quadrant-based partitioning without explicit region hints. The central target (30,35) is a distractor — optimal plan must still send agents to extreme corners first to maximize bonus B."

[env.COVERAGE_1_5]
number_of_agents = 2
grid_size = 40
mission_statement = "Two targets are located at random positions, each in opposite corners of the grid. No other information is given."
goals = [(3, 37), (37, 3)]
description = "Tests if the planner can recognize that two targets in opposite corners require two agents to be dispatched immediately along diagonal paths — avoiding a naive sequential search that would waste 50+ steps."

[env.COVERAGE_2_1]
number_of_agents = 2
grid_size = 30
mission_statement = "Targets are somewhere on the grid. There are two targets total."
goals = [(12, 25), (28, 7)]
description = "Worst-case blind exploration: no spatial clues. Tests whether the planner generates a provably complete spiral or serpentine coverage pattern from (1,1), ensuring all cells are eventually visited without duplication."

[env.COVERAGE_2_2]
number_of_agents = 3
grid_size = 50
mission_statement = "There are three targets on the grid. No information about their location or distribution is provided."
goals = [(5, 48), (33, 11), (49, 45)]
description = "Forces the planner to implement a divide-and-conquer coverage strategy: assign each agent a sector (e.g., top-left, top-right, bottom) and scan systematically. Any agent assigned to a redundant region fails the test."

[env.COVERAGE_2_3]
number_of_agents = 5
grid_size = 100
mission_statement = "There are five targets on the grid. You know nothing else."
goals = [(2, 98), (15, 30), (50, 5), (88, 77), (95, 22)]
description = "Tests if the planner can scale blind coverage to large grids with many agents. Optimal solution uses agents as parallel sweepers along diagonal or zigzag lanes, minimizing overlap and maximizing discovery rate under γ=0.99."

[env.COVERAGE_2_4]
number_of_agents = 2
grid_size = 20
mission_statement = "One target is on the grid. No other information is given."
goals = [(18, 3)]
description = "Even with one target, blind search must be efficient. Tests whether the planner avoids exhaustive grid scan and instead uses a spiral or wavefront expansion from (1,1) to minimize expected discovery time."

[env.COVERAGE_2_5]
number_of_agents = 4
grid_size = 60
mission_statement = "Four targets exist somewhere on the grid. No spatial information is provided."
goals = [(4, 58), (55, 12), (30, 31), (59, 59)]
description = "Challenges the planner to avoid local search traps. A naive agent might circle near (1,1) — optimal plan must immediately branch toward four cardinal directions to cover maximum area per timestep."

[env.COVERAGE_3_1]
number_of_agents = 2
grid_size = 40
mission_statement = "All targets are located near the grid's boundaries. There are two targets total."
goals = [(1, 15), (38, 1)]
description = "Tests if the planner overrides the instinct to search the center. Targets are on the left and bottom edges — optimal plan sends agents directly along x=1 and y=1, not into the interior."

[env.COVERAGE_3_2]
number_of_agents = 3
grid_size = 50
mission_statement = "Three targets are located exclusively along the perimeter of the grid. The center is empty."
goals = [(1, 45), (49, 20), (25, 1)]
description = "Evaluates whether the planner interprets 'near boundary' as boundary-only and avoids wasting steps searching (10,10) to (40,40). Agents must be assigned to scan top, right, and bottom edges."

[env.COVERAGE_3_3]
number_of_agents = 4
grid_size = 80
mission_statement = "All four targets lie on the outer edges of the grid — none are in the interior (x>1 and x<N-1 and y>1 and y<N-1)."
goals = [(1, 5), (79, 78), (1, 78), (79, 5)]
description = "Tests corner prioritization: all targets are at corners. Planner must immediately route agents to the four corners along the shortest boundary paths, not via center."

[env.COVERAGE_3_4]
number_of_agents = 2
grid_size = 30
mission_statement = "Two targets are located on the top and bottom edges. The left and right edges are empty."
goals = [(15, 1), (14, 29)]
description = "Tests precision in interpreting 'edges' — planner must restrict search to y=1 and y=N-1, not waste time scanning full width. Agents should sweep horizontally along top and bottom rows."

[env.COVERAGE_3_5]
number_of_agents = 3
grid_size = 60
mission_statement = "Targets are located only along the grid's border. There are three targets. The interior is guaranteed empty."
goals = [(1, 10), (59, 30), (30, 59)]
description = "Combines edge focus with asymmetric placement. Planner must avoid center-seeking behavior and instead deploy agents to scan only boundary cells — any agent moving inward before covering edges fails."

[env.COVERAGE_4_1]
number_of_agents = 2
grid_size = 60
mission_statement = "One target is in the region from (5,5) to (15,15), and another target is in the region from (45,45) to (55,55). These regions are identical in size and equidistant from (1,1)."
goals = [(10, 10), (50, 50)]
description = "Tests symmetry-aware assignment: two identical regions at symmetric far locations. Optimal plan assigns one agent per region. A single agent visiting both would be slower and lose bonus B."

[env.COVERAGE_4_2]
number_of_agents = 4
grid_size = 100
mission_statement = "Two targets are in the top-left region (5,5)-(20,20), and two targets are in the bottom-right region (80,80)-(95,95). The regions are symmetric and equidistant from (1,1)."
goals = [(12, 18), (8, 7), (85, 90), (92, 83)]
description = "Tests if planner assigns two agents to each symmetric region in parallel, rather than sending one agent to cover both regions sequentially. Sequential search would double time and reduce reward."

[env.COVERAGE_4_3]
number_of_agents = 3
grid_size = 80
mission_statement = "One target is in region (10,10)-(20,20), one in (60,10)-(70,20), and one in (40,60)-(50,70). The first two are symmetric across the vertical midline; the third is asymmetric."
goals = [(15, 15), (65, 15), (45, 65)]
description = "Tests partial symmetry recognition: planner must assign two agents to the symmetric pair (left/right top) and one to the distant bottom target. Failing to parallelize the symmetric pair reduces efficiency."

[env.COVERAGE_4_4]
number_of_agents = 4
grid_size = 70
mission_statement = "Two targets are in the top-right quadrant (50,10)-(69,29), and two targets are in the bottom-left quadrant (1,40)-(19,59). These regions are symmetric about the center."
goals = [(55, 18), (62, 12), (10, 45), (15, 55)]
description = "Challenges planner to recognize diagonal symmetry and assign agents in mirrored pairs. A plan that sends two agents to one side and none to the other would be suboptimal and miss the bonus."

[env.COVERAGE_4_5]
number_of_agents = 2
grid_size = 50
mission_statement = "One target is in region (5,40)-(15,50) and one in region (40,5)-(50,15). The regions are symmetric across the diagonal from (1,1) to (49,49)."
goals = [(10, 45), (45, 10)]
description = "Tests diagonal symmetry awareness. Agents must be assigned to mirror positions across y=x. Sending both agents to one side would fail to exploit parallelism and delay discovery."

[env.COVERAGE_5_1]
number_of_agents = 2
grid_size = 40
mission_statement = "Targets are located near the border of the grid. There are two targets."
goals = [(1, 12), (1, 35)]
description = "Tests if planner narrows 'near border' to exact boundary (x=1 or y=1 or x=N-1 or y=N-1). Both targets are on left edge — optimal plan searches only x=1, not the entire left half-grid."

[env.COVERAGE_5_2]
number_of_agents = 3
grid_size = 60
mission_statement = "All targets lie along the top edge (y=1). The mission says 'near the border', but no other regions are mentioned."
goals = [(15, 1), (42, 1), (58, 1)]
description = "Evaluates precision in region interpretation. Planner must restrict search to y=1 and scan horizontally — any agent searching y=2 or deeper wastes steps and reduces reward."

[env.COVERAGE_5_3]
number_of_agents = 2
grid_size = 50
mission_statement = "Two targets are located along the right edge of the grid. The mission states 'near the border'."
goals = [(49, 8), (49, 45)]
description = "Tests whether planner understands that 'right edge' means x=N-1. Agents should move directly to x=49 and sweep vertically — not explore the entire right half (x>25)."

[env.COVERAGE_5_4]
number_of_agents = 4
grid_size = 80
mission_statement = "Targets are located along the four edges: one on top, one on bottom, one on left, one on right. Mission says 'near the border'."
goals = [(40, 1), (40, 79), (1, 40), (79, 40)]
description = "Tests if planner interprets 'border' as the boundary lines, not the border regions. Agents must be assigned to sweep exactly along y=1, y=N-1, x=1, x=N-1 — avoiding 2-cell-wide search zones."

[env.COVERAGE_5_5]
number_of_agents = 2
grid_size = 30
mission_statement = "Two targets are located along the bottom edge. Mission says 'near the bottom border'."
goals = [(10, 29), (25, 29)]
description = "Challenges planner to infer that 'bottom border' = y=N-1. A naive agent might search y=25 to y=29 — optimal plan searches only y=29 and moves horizontally. Efficiency gains directly impact cumulative reward."

[env.BONUS_1_1]
number_of_agents = 3
grid_size = 100
mission_statement = "Six targets are contained within the region from (45, 45) to (55, 55), and one target is located far away in the region from (1, 1) to (5, 5)."
goals = [(48, 50), (52, 53), (46, 47), (50, 51), (49, 49), (51, 52), (3, 3)]
description = "Tests whether the planner prioritizes the distant outlier (3,3) early despite the high-density cluster at center. If all agents rush to the center, the single outlier remains undiscovered → bonus lost. Success requires dispatching one agent immediately to (1,1)–(5,5) while others clear the core."

[env.BONUS_1_2]
number_of_agents = 4
grid_size = 200
mission_statement = "Seven targets are in the region from (90, 90) to (110, 110), and one target is hidden in the top-left corner region from (1, 1) to (10, 10)."
goals = [(95, 98), (102, 105), (91, 101), (108, 103), (99, 96), (105, 107), (100, 100), (7, 8)]
description = "High-density core (7 targets) vs. one isolated target. Planner must recognize that leaving the outlier unsearched risks total bonus failure. Optimal plan sends one agent on a direct diagonal path to (1,1)–(10,10) while the other three sweep the central zone — trading early local rewards for guaranteed bonus."

[env.BONUS_1_3]
number_of_agents = 5
grid_size = 150
mission_statement = "Four targets are in the region from (70, 70) to (80, 80), and three targets are scattered in the region from (1, 140) to (10, 149)."
goals = [(73, 75), (77, 72), (76, 78), (71, 79), (5, 145), (8, 142), (2, 148)]
description = "Misleading density: the 'outlier' region (1,140)–(10,149) has 3 targets — more than the central cluster! Tests if planner correctly identifies that the 'outlier' is actually the majority. Success requires assigning 3 agents to top-right and 2 to center — reversing intuition to maximize bonus."

[env.BONUS_1_4]
number_of_agents = 3
grid_size = 300
mission_statement = "Eight targets are in the region from (140, 140) to (160, 160), and one target is in the bottom-right corner region from (290, 290) to (299, 299)."
goals = [(145, 147), (152, 155), (141, 159), (158, 143), (149, 151), (156, 148), (150, 150), (144, 146), (295, 297)]
description = "Extreme distance: outlier is 150+ units away. Tests if planner understands that even with 8 targets nearby, the single distant one makes bonus impossible without early dispatch. Optimal plan: one agent takes shortest path to (290,290) immediately; others sweep center. Delaying the outlier = guaranteed zero bonus."

[env.BONUS_1_5]
number_of_agents = 4
grid_size = 250
mission_statement = "Five targets are in the region from (100, 100) to (120, 120), and one target is in the region from (1, 240) to (10, 249)."
goals = [(105, 110), (115, 112), (102, 108), (118, 115), (109, 105), (5, 245)]
description = "Tests whether planner ignores the intuitive 'majority rule' and correctly infers that one missing target = bonus loss. Even though 5 targets are clustered, the lone outlier at (1,240)–(10,249) must be prioritized. Plan must send one agent directly there first — otherwise, even 5/6 found = no bonus."

[env.BONUS_2_1]
number_of_agents = 3
grid_size = 80
mission_statement = "Three targets are in the region from (5, 5) to (15, 15), and two targets are in the region from (40, 40) to (50, 50)."
goals = [(8, 12), (11, 10), (13, 8), (45, 47), (42, 43), (48, 49)]
description = "Mission implies 5 targets (3+2), but 6 are present. Tests if planner detects inconsistency and searches beyond stated regions. Success requires scanning entire (40,40)–(50,50) thoroughly — even if mission says 'two', the planner must find all targets present. Bonus depends on total count, not mission text."

[env.BONUS_2_2]
number_of_agents = 4
grid_size = 120
mission_statement = "Two targets are in the region from (10, 10) to (30, 30), three targets are in the region from (70, 70) to (90, 90), and one target is in the region from (1, 110) to (10, 119)."
goals = [(15, 25), (22, 18), (75, 80), (85, 78), (80, 85), (88, 82), (5, 115)]
description = "Mission states 6 targets (2+3+1), but 7 exist. Planner must not stop after finding six. Tests resilience to misleading language. Optimal plan: assign agents to cover all regions fully, especially (70,70)–(90,90) which has 3 stated but 4 actual targets — missing one here = bonus lost."

[env.BONUS_2_3]
number_of_agents = 5
grid_size = 200
mission_statement = "Four targets are in the region from (50, 50) to (70, 70), and two targets are in the region from (180, 180) to (190, 190)."
goals = [(55, 60), (62, 58), (59, 65), (68, 63), (185, 187), (182, 189), (188, 183), (52, 53)]
description = "Mission implies 6 targets, but 8 exist — two extra in the first region. Tests if planner can infer that 'four targets' is a lower bound, not exact. Must scan entire (50,50)–(70,70) thoroughly. Failure to find all 8 = bonus lost. Planner must treat mission as approximate, not authoritative."

[env.BONUS_2_4]
number_of_agents = 2
grid_size = 100
mission_statement = "Three targets are in the region from (1, 1) to (20, 20), and two targets are in the region from (80, 80) to (99, 99)."
goals = [(5, 15), (12, 8), (18, 19), (85, 88), (92, 95), (81, 82), (89, 91)]
description = "Mission says 5 targets total, but 7 are present — two extra in the far region. Planner must not assume 'two targets' means exactly two. Must search entire (80,80)–(99,99) exhaustively. This environment tests whether the planner ignores textual constraints and relies on total target discovery as the only objective."

[env.BONUS_2_5]
number_of_agents = 3
grid_size = 150
mission_statement = "One target is in the region from (10, 10) to (30, 30), one target is in the region from (100, 100) to (120, 120), and one target is in the region from (130, 130) to (140, 140)."
goals = [(15, 20), (105, 110), (135, 138), (132, 136), (25, 18)]
description = "Mission states 3 targets, but 5 exist — two extra in the first region. Tests if planner can detect that 'one target' may be a minimum. Since bonus requires ALL targets, planner must search entire (10,10)–(30,30) thoroughly. A naive planner stops after finding one here and misses two others → bonus lost."

[env.AGENT_1_1]
number_of_agents = 2
grid_size = 30
mission_statement = "One target is contained within the region from (3, 3) to (8, 8), one target is contained within the region from (22, 3) to (27, 8), one target is contained within the region from (3, 22) to (8, 27), and one target is contained within the region from (22, 22) to (27, 27)."
goals = [(5, 6), (25, 5), (6, 25), (24, 24)]
description = "Tests balanced region distribution with 4 symmetric, non-overlapping regions of equal size and distance from (1,1). With 2 agents and 4 targets, the planner must assign each agent to two opposite regions in sequence, ensuring parallel discovery to maximize early reward and bonus accumulation."

[env.AGENT_1_2]
number_of_agents = 3
grid_size = 40
mission_statement = "Two targets are in the region from (5, 5) to (12, 12), two targets are in the region from (28, 5) to (35, 12), and two targets are in the region from (16, 28) to (23, 35)."
goals = [(8, 9), (10, 7), (30, 8), (33, 10), (19, 32), (21, 30)]
description = "Tests balanced allocation across 3 symmetric regions with 2 targets each. With 3 agents, each agent is assigned to one region. The planner must avoid redundant paths and ensure each agent scans their assigned region systematically to discover both targets efficiently."

[env.AGENT_1_3]
number_of_agents = 4
grid_size = 50
mission_statement = "One target is in the region from (4, 4) to (9, 9), one in (41, 4) to (46, 9), one in (4, 41) to (9, 46), and one in (41, 41) to (46, 46)."
goals = [(6, 7), (43, 6), (7, 44), (44, 43)]
description = "Tests perfect 1:1 agent-to-region mapping with 4 agents and 4 targets in four corner-adjacent regions. Each agent moves directly to their assigned region. The planner must exploit symmetry to minimize path length and ensure all targets are found within 30 steps to maximize bonus B."

[env.AGENT_1_4]
number_of_agents = 2
grid_size = 60
mission_statement = "Two targets are in the region from (6, 6) to (14, 14), two targets are in the region from (46, 6) to (54, 14), two targets are in the region from (6, 46) to (14, 54), and two targets are in the region from (46, 46) to (54, 54)."
goals = [(10, 10), (12, 8), (50, 10), (48, 12), (10, 50), (12, 48), (50, 50), (48, 48)]
description = "Tests balanced distribution under higher target density (8 targets, 4 regions). With only 2 agents, the planner must assign each agent to two opposite regions sequentially. Path planning must prioritize regions that allow shortest return paths to minimize timesteps and maximize cumulative reward."

[env.AGENT_1_5]
number_of_agents = 4
grid_size = 35
mission_statement = "One target is in the region from (3, 18) to (8, 23), one in (18, 3) to (23, 8), one in (27, 18) to (32, 23), and one in (18, 27) to (23, 32)."
goals = [(5, 20), (20, 5), (30, 20), (20, 30)]
description = "Tests balanced allocation across 4 diamond-shaped regions positioned at 45-degree offsets from center. Agents must navigate diagonally to reach targets. The planner must avoid path collisions and assign agents to regions that minimize Manhattan distance while enabling parallel discovery."

[env.AGENT_2_1]
number_of_agents = 3
grid_size = 50
mission_statement = "Four targets are contained within the region from (10, 10) to (20, 20), one target is contained within the region from (40, 40) to (45, 45)."
goals = [(13, 15), (16, 12), (11, 18), (17, 16), (42, 43)]
description = "Tests skewed target density: 80% of targets in one region. Planner must allocate 2 agents to the dense region for parallel scanning, and 1 agent to the distant singleton. Avoids under-exploration of the rare target while maximizing early reward from the high-density zone."

[env.AGENT_2_2]
number_of_agents = 4
grid_size = 60
mission_statement = "Five targets are in the region from (5, 5) to (15, 15), two targets are in the region from (50, 50) to (55, 55)."
goals = [(8, 12), (11, 7), (13, 10), (9, 14), (12, 9), (52, 53), (54, 51)]
description = "Tests risk-aware allocation under extreme skew (5 vs 2 targets). Planner must assign 3 agents to the dense region (to scan efficiently) and 1 agent to the distant pair. Extra agent in dense region reduces search time, increasing chance of bonus B by discovering targets before timestep 40."

[env.AGENT_2_3]
number_of_agents = 2
grid_size = 80
mission_statement = "One target is in the region from (10, 10) to (15, 15), one target is in the region from (60, 60) to (70, 70), and three targets are in the region from (35, 35) to (45, 45)."
goals = [(12, 13), (65, 67), (38, 40), (42, 43), (36, 37)]
description = "Tests tradeoff between speed and completeness: one region has 3 targets (medium distance), others are sparse but farther. Planner must assign one agent to the high-density center region and the other to explore the two distant regions in sequence — prioritizing the 3-target zone to maximize early reward."

[env.AGENT_2_4]
number_of_agents = 5
grid_size = 100
mission_statement = "Six targets are in the region from (20, 20) to (30, 30), one target is in the region from (1, 80) to (10, 90), one target is in the region from (80, 1) to (90, 10)."
goals = [(23, 25), (27, 22), (21, 28), (26, 24), (24, 27), (22, 21), (5, 85), (85, 5)]
description = "Tests high-stakes allocation: 75% of targets in one central region. Planner assigns 4 agents to scan the dense zone in parallel using quadrant partitioning, and 1 agent each to fringe regions. Ensures no target is missed while maximizing discovery speed in the critical zone."

[env.AGENT_2_5]
number_of_agents = 3
grid_size = 70
mission_statement = "One target is in the region from (5, 5) to (10, 10), five targets are in the region from (30, 30) to (40, 40), one target is in the region from (60, 60) to (65, 65)."
goals = [(7, 8), (33, 35), (37, 32), (31, 38), (39, 34), (35, 36), (62, 63)]
description = "Tests multi-tiered risk assessment: one very dense region (5 targets), two sparse but distant regions. Planner assigns 2 agents to the dense zone (for rapid discovery), 1 agent to the farthest target (to avoid missing bonus). The medium-distance target is ignored since bonus requires all targets — so all must be found."

[env.AGENT_3_1]
number_of_agents = 5
grid_size = 40
mission_statement = "Three targets are contained within the region from (8, 8) to (15, 15)."
goals = [(10, 11), (13, 9), (11, 14)]
description = "Tests high agent-to-target ratio (5 agents, 3 targets). Planner must avoid redundancy: assign 3 agents to scan the region using non-overlapping paths (e.g., grid rows), and 2 agents to explore fringe areas (e.g., (1,39) and (39,1)) to catch any misclassified targets or false mission bounds."

[env.AGENT_3_2]
number_of_agents = 4
grid_size = 50
mission_statement = "Two targets are in the region from (10, 10) to (20, 20), and one target is in the region from (30, 30) to (35, 35)."
goals = [(14, 16), (17, 12), (32, 33)]
description = "Tests redundancy vs. exploration tradeoff. With 4 agents and 3 targets, planner assigns 2 agents to the larger region (for faster discovery), 1 to the small region, and 1 to a fringe area (e.g., (1,49)) — ensuring bonus eligibility even if mission statement is incomplete."

[env.AGENT_3_3]
number_of_agents = 5
grid_size = 60
mission_statement = "Three targets are in the region from (5, 5) to (12, 12), two targets are in the region from (48, 48) to (55, 55)."
goals = [(7, 9), (10, 8), (9, 11), (50, 52), (53, 51)]
description = "Tests coordination in dual-region high-agent scenario. Planner assigns 3 agents to the first region (divided into 3 sectors), 2 agents to the second. Extra agents are not idle — they are used to scan overlapping or boundary areas that may contain hidden targets beyond mission bounds."

[env.AGENT_3_4]
number_of_agents = 5
grid_size = 30
mission_statement = "One target is in the region from (3, 3) to (7, 7), one target is in the region from (23, 3) to (27, 7), one target is in the region from (3, 23) to (7, 27), one target is in the region from (23, 23) to (27, 27)."
goals = [(5, 5), (25, 5), (5, 25), (25, 25)]
description = "Tests over-allocation in symmetric environment. With 5 agents and 4 targets, planner assigns one agent per region and uses the 5th agent to explore the center (15,15) — a potential hidden target zone not mentioned in the mission, maximizing safety against incomplete knowledge."

[env.AGENT_3_5]
number_of_agents = 5
grid_size = 80
mission_statement = "Two targets are in the region from (15, 15) to (25, 25)."
goals = [(18, 20), (22, 17)]
description = "Tests extreme over-allocation: 5 agents for 2 targets. Planner divides the region into 5 overlapping search sectors and assigns each agent a unique spiral scan path to ensure full coverage. The extra 3 agents prevent missed targets due to imperfect region bounds or stochastic placement."

[env.AGENT_4_1]
number_of_agents = 2
grid_size = 50
mission_statement = "Five targets are contained within the region from (5, 5) to (15, 15)."
goals = [(7, 8), (10, 12), (13, 9), (8, 14), (11, 6)]
description = "Tests low agent-to-target ratio under concentrated targets. With only 2 agents for 5 targets, planner assigns both agents to the same region but with orthogonal search patterns (e.g., one scans rows, the other columns) to maximize coverage speed and avoid duplication."

[env.AGENT_4_2]
number_of_agents = 2
grid_size = 60
mission_statement = "One target is in the region from (5, 5) to (10, 10), one in (20, 20) to (25, 25), one in (40, 40) to (45, 45), one in (5, 50) to (10, 55), and one in (50, 5) to (55, 10)."
goals = [(7, 8), (22, 23), (42, 43), (7, 53), (53, 7)]
description = "Tests multi-region pressure under scarcity. Planner must assign each agent to alternate between distant regions. Optimal path: Agent 1: (1,1)→(7,8)→(42,43)→(53,7); Agent 2: (1,1)→(22,23)→(7,53). Prioritizes regions in order of increasing distance to minimize total steps."

[env.AGENT_4_3]
number_of_agents = 2
grid_size = 70
mission_statement = "Three targets are in the region from (10, 10) to (20, 20), two targets are in the region from (50, 50) to (60, 60)."
goals = [(13, 15), (17, 12), (11, 18), (55, 57), (52, 53)]
description = "Tests prioritization under constraint: 3 targets in near region, 2 in far. Planner assigns both agents to the near region first to find 3 targets quickly, then both move to far region. This delays the last two but ensures bonus eligibility by guaranteeing all are found — avoids partial reward penalty."

[env.AGENT_4_4]
number_of_agents = 2
grid_size = 100
mission_statement = "One target is in the region from (3, 3) to (8, 8), one in (15, 15) to (20, 20), one in (30, 30) to (35, 35), one in (60, 60) to (65, 65), one in (90, 90) to (95, 95)."
goals = [(5, 6), (17, 18), (32, 33), (62, 63), (92, 93)]
description = "Tests extreme multi-region pressure: 5 targets spread across 5 increasingly distant regions. Planner assigns each agent to alternate regions in a zigzag pattern (Agent 1: 1st, 3rd, 5th; Agent 2: 2nd, 4th) to balance load and minimize cumulative path length. Bonus is only achievable with perfect sequencing."

[env.AGENT_4_5]
number_of_agents = 2
grid_size = 50
mission_statement = "Four targets are in the region from (10, 10) to (15, 15), one target is in the region from (40, 40) to (45, 45)."
goals = [(11, 12), (13, 14), (12, 11), (14, 13), (42, 43)]
description = "Tests prioritization with hidden risk: 4 targets clustered, 1 distant. Planner sends both agents to cluster first to find 4 targets fast, then one agent proceeds to the distant target. The second agent waits — minimizing wasted steps. Ensures bonus by guaranteeing all targets are found within T_max."

[env.AGENT_5_1]
number_of_agents = 2
grid_size = 40
mission_statement = "One target is in the region from (5, 5) to (10, 10), and one target is in the region from (30, 30) to (35, 35)."
goals = [(7, 8), (32, 33)]
description = "Tests symmetry-aware assignment: two identical, symmetric regions equidistant from (1,1). Planner assigns one agent to each region simultaneously — avoiding a single agent traveling to both, which would double the time. Parallel discovery ensures maximum reward and bonus eligibility."

[env.AGENT_5_2]
number_of_agents = 3
grid_size = 60
mission_statement = "Two targets are in the region from (6, 6) to (12, 12), and two targets are in the region from (48, 48) to (54, 54)."
goals = [(8, 10), (11, 7), (50, 52), (53, 51)]
description = "Tests symmetric region coordination with surplus agent. Planner assigns one agent to each symmetric region and uses the third agent to explore the center (30,30) — a potential hidden target zone. Ensures symmetry is exploited for speed, while redundancy prevents mission ambiguity."

[env.AGENT_5_3]
number_of_agents = 4
grid_size = 80
mission_statement = "One target is in the region from (5, 5) to (10, 10), one in (5, 70) to (10, 75), one in (70, 5) to (75, 10), and one in (70, 70) to (75, 75)."
goals = [(7, 8), (7, 72), (72, 7), (73, 73)]
description = "Tests four-way symmetry with 4 agents and 4 targets. Planner assigns one agent per corner region with identical path structure: (1,1) → target region → scan. Ensures perfect parallelism, minimizing total time and maximizing bonus B by discovering all targets at nearly the same timestep."

[env.AGENT_5_4]
number_of_agents = 2
grid_size = 100
mission_statement = "Three targets are in the region from (10, 10) to (20, 20), and three targets are in the region from (80, 80) to (90, 90)."
goals = [(13, 15), (16, 12), (11, 18), (83, 85), (87, 82), (81, 88)]
description = "Tests symmetric high-density regions. Planner assigns one agent to each symmetric zone, each scanning their region with a spiral pattern. Avoids sequential traversal (which would take 2x longer) and ensures both zones are cleared in parallel — critical for bonus eligibility when targets are numerous."

[env.AGENT_5_5]
number_of_agents = 3
grid_size = 70
mission_statement = "Two targets are in the region from (8, 8) to (15, 15), and two targets are in the region from (55, 55) to (62, 62)."
goals = [(10, 12), (13, 10), (58, 59), (60, 57)]
description = "Tests asymmetric symmetry: equal number of targets in symmetric regions, but different sizes. Planner assigns one agent to each region and uses the third agent to monitor the central corridor (e.g., (35,35)) for possible hidden targets — ensuring completeness while maintaining symmetry in primary search."

[env.ROBUST_1_1]
number_of_agents = 2
grid_size = 30
mission_statement = "Targets are somewhere on the grid."
goals = [(15, 8), (22, 27)]
description = "Tests blind systematic exploration: no spatial clues are given. Planner must partition the entire (1,1) to (29,29) grid efficiently across agents, using spiral or raster scan patterns from origin. Ensures completeness without prior knowledge."

[env.ROBUST_1_2]
number_of_agents = 3
grid_size = 50
mission_statement = "There are targets on the grid."
goals = [(3, 48), (25, 12), (47, 2)]
description = "Minimal input forces agents to cover maximum area. With 3 agents, optimal strategy is to divide grid into 3 vertical/horizontal strips. Tests if planner avoids random walks and implements provably complete coverage (e.g., serpentine scan)."

[env.ROBUST_1_3]
number_of_agents = 5
grid_size = 100
mission_statement = "Find the targets."
goals = [(10, 15), (88, 77), (45, 33), (2, 99), (60, 5)]
description = "Extremely sparse input tests scalability under worst-case uncertainty. With 5 agents and large grid, planner must hierarchically divide space (e.g., 5 quadrants + center) and assign agents to non-overlapping subregions. Validates ability to generate large-scale coverage plans without guidance."

[env.ROBUST_1_4]
number_of_agents = 2
grid_size = 20
mission_statement = "Targets exist."
goals = [(5, 5), (18, 12)]
description = "Tests if planner can infer target count from environment (T=2) despite no description. Forces minimal planning: agents must explore systematically without assumptions. Ensures no fallback to 'wait' or 'guess' behavior."

[env.ROBUST_1_5]
number_of_agents = 4
grid_size = 200
mission_statement = "Somewhere on the grid, targets are hidden."
goals = [(100, 50), (150, 180), (20, 190), (180, 20)]
description = "Extremely vague input on a very large grid. Tests hierarchical decomposition: planner must first move agents toward approximate centers of quadrants, then refine locally. Validates robustness to exponential state space under zero-information conditions."


[env.ROBUST_2_1]
number_of_agents = 3
grid_size = 40
mission_statement = "Three targets are in the region from (5, 5) to (15, 15). One target is in the region from (20, 20) to (30, 30)."
goals = [(10, 10), (12, 13), (8, 8), (25, 25), (28, 22)]
description = "Mission implies 4 targets (3+1) but states 'three' in first region — actual count is 5. Tests if planner ignores misleading phrasing and uses true goal count (5) to assign 3 agents to cover all regions. Validates error resilience and goal-centric planning."

[env.ROBUST_2_2]
number_of_agents = 2
grid_size = 50
mission_statement = "Two targets are in the top-left quadrant, and two are in the bottom-right quadrant."
goals = [(7, 8), (12, 15), (35, 40), (42, 45), (48, 3)]
description = "Mission implies 4 targets, but 5 exist. Planner must detect mismatch and prioritize full coverage. The extra target at (48,3) is outside described regions — tests if agent explores beyond implied boundaries when target count exceeds expectation."

[env.ROBUST_2_3]
number_of_agents = 4
grid_size = 60
mission_statement = "Four targets are contained in the region from (10, 10) to (20, 20)."
goals = [(15, 15), (11, 18), (17, 12), (13, 14), (55, 55)]
description = "Mission suggests 4 targets in one region, but fifth target is far outside. Planner must infer total count from environment and assign one agent to distant outlier. Tests ability to override misleading regional claims with empirical target count."

[env.ROBUST_2_4]
number_of_agents = 3
grid_size = 30
mission_statement = "One target is in the region from (1,1) to (10,10), and two are in the region from (20,20) to (29,29)."
goals = [(5, 5), (25, 25)]
description = "Mission implies 3 targets, but only 2 exist. Tests if planner avoids over-allocating agents to non-existent targets. Must detect under-count and reassign extra agent to explore unmentioned areas (e.g., center or borders)."

[env.ROBUST_2_5]
number_of_agents = 5
grid_size = 100
mission_statement = "Three targets are near the center, and four are near the edges."
goals = [(48, 52), (50, 50), (55, 45), (2, 10), (98, 95), (3, 97), (97, 5)]
description = "Mission implies 7 targets, but 7 exist — yet 'near the center' and 'near the edges' are vague. Planner must count actual goals (7) and assign agents to cover all 7, even if regions overlap or are imprecise. Tests resilience to ambiguous quantification with correct total count."

[env.ROBUST_3_1]
number_of_agents = 2
grid_size = 40
mission_statement = "Targets are near the border of the grid."
goals = [(1, 15), (39, 1), (1, 38), (39, 39)]
description = "Mission says 'near border' but all targets lie exactly on boundary (x=1, x=39, y=1, y=39). Tests if planner narrows search to boundary lines (not entire outer 5 rows/columns). Agents should patrol perimeter, not waste steps in interior."

[env.ROBUST_3_2]
number_of_agents = 3
grid_size = 50
mission_statement = "Targets are located along the edges."
goals = [(1, 7), (1, 45), (49, 12), (49, 38)]
description = "All targets on left/right (x=1/x=49) edges. Planner must avoid scanning top/bottom edges unnecessarily. Optimal plan: two agents scan left/right walls, one scans top/bottom only if needed — tests precision in interpreting 'edges' as boundary lines."

[env.ROBUST_3_3]
number_of_agents = 2
grid_size = 30
mission_statement = "One target is on the top border, one on the bottom border."
goals = [(15, 1), (15, 29)]
description = "Mission correctly identifies top/bottom, but planner must not search entire rows — only scan along y=1 and y=29. Tests if agent paths are constrained to target lines, not full-row sweeps. Efficiency over brute force."

[env.ROBUST_3_4]
number_of_agents = 4
grid_size = 100
mission_statement = "Targets are close to the perimeter."
goals = [(1, 50), (99, 1), (99, 99), (1, 99), (50, 1)]
description = "Five targets on perimeter, mission says 'close to' — planner must infer they are on the boundary. Must avoid searching interior 96x96 area. Agents should execute perimeter walk (clockwise/counterclockwise) with minimal redundancy."

[env.ROBUST_3_5]
number_of_agents = 2
grid_size = 60
mission_statement = "Targets are along the outer edge of the map."
goals = [(1, 1), (1, 59), (59, 1), (59, 59)]
description = "Targets only at four corners. Mission says 'outer edge' — planner must not scan entire perimeter (236 cells) but jump to corners directly. Tests ability to infer sparse target locations from vague spatial language and optimize for point targets on boundaries."


[env.ROBUST_4_1]
number_of_agents = 3
grid_size = 50
mission_statement = "One target is in (5,5) to (15,15), one in (10,10) to (20,20), one in (12,12) to (18,18), and one in (8,8) to (16,16)."
goals = [(13, 14)]
description = "Four overlapping regions described, but only one target exists. Planner must union regions into (5,5) to (20,20) and assign one agent to search it. Others should explore elsewhere — tests noise filtering and avoidance of redundant agent allocation."

[env.ROBUST_4_2]
number_of_agents = 4
grid_size = 80
mission_statement = "Targets are in the top-left (1,1)-(20,20), top-right (1,60)-(20,80), bottom-left (60,1)-(80,20), bottom-right (60,60)-(80,80), and also in the center (30,30)-(50,50)."
goals = [(15, 15)]
description = "Five regions described, but only one target in center. Planner must ignore peripheral regions and assign all agents to center. Tests ability to detect low target density and avoid splitting agents across empty zones."

[env.ROBUST_4_3]
number_of_agents = 5
grid_size = 100
mission_statement = "Two targets are in region A (10,10)-(30,30), two in region B (25,25)-(45,45), two in region C (40,40)-(60,60), and two in region D (55,55)-(75,75)."
goals = [(28, 28), (58, 58)]
description = "Mission implies 8 targets, but only 2 exist. Regions overlap heavily. Planner must union all into one large region (10,10)-(75,75) and search it efficiently with 2 agents, leaving others to explore unlikely areas. Tests detection of over-specified, redundant regions."

[env.ROBUST_4_4]
number_of_agents = 2
grid_size = 40
mission_statement = "Targets are in the region from (1,1) to (10,10), and also in the region from (1,1) to (10,10), and again from (1,1) to (10,10)."
goals = [(5, 5)]
description = "Redundant, identical regions stated three times. Planner must deduce single region and assign one agent to search it. Other agent explores elsewhere. Tests resilience to input duplication and semantic noise."

[env.ROBUST_4_5]
number_of_agents = 4
grid_size = 60
mission_statement = "One target is in (5,5)-(15,15), one in (10,10)-(20,20), one in (25,25)-(35,35), one in (30,30)-(40,40), and one in (50,50)-(55,55)."
goals = [(12, 12), (33, 33)]
description = "Five regions described, only two targets. Planner must identify overlapping pairs ((5,5)-(20,20) and (25,25)-(40,40)) and merge them, then assign two agents to those two merged zones. Others should explore unmentioned areas (e.g., (50,50)-(55,55) is likely false). Tests logical region reduction under noise."